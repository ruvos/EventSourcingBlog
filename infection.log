Escaped mutants:
================

1) /var/www/html/src/Database/SqLiteEventStore.php:49    [M] ArrayItemRemoval

@@ @@
                               :payload
                               )
                               ');
-        $statement->execute([':eventId' => $event->eventId, ':correlationId' => $event->correlationId, ':topic' => $event->getTopic(), ':createdAt' => $event->createdAt->format('Y-m-d H:i:s.u'), ':payload' => $payload]);
+        $statement->execute([':correlationId' => $event->correlationId, ':topic' => $event->getTopic(), ':createdAt' => $event->createdAt->format('Y-m-d H:i:s.u'), ':payload' => $payload]);
         $connection->commit();
     }
     private function createSchema(): void


2) /var/www/html/src/Database/SqLiteEventStore.php:50    [M] ArrayItem

@@ @@
                               :payload
                               )
                               ');
-        $statement->execute([':eventId' => $event->eventId, ':correlationId' => $event->correlationId, ':topic' => $event->getTopic(), ':createdAt' => $event->createdAt->format('Y-m-d H:i:s.u'), ':payload' => $payload]);
+        $statement->execute([':eventId' > $event->eventId, ':correlationId' => $event->correlationId, ':topic' => $event->getTopic(), ':createdAt' => $event->createdAt->format('Y-m-d H:i:s.u'), ':payload' => $payload]);
         $connection->commit();
     }
     private function createSchema(): void


3) /var/www/html/src/Database/SqLiteEventStore.php:51    [M] ArrayItem

@@ @@
                               :payload
                               )
                               ');
-        $statement->execute([':eventId' => $event->eventId, ':correlationId' => $event->correlationId, ':topic' => $event->getTopic(), ':createdAt' => $event->createdAt->format('Y-m-d H:i:s.u'), ':payload' => $payload]);
+        $statement->execute([':eventId' => $event->eventId, ':correlationId' > $event->correlationId, ':topic' => $event->getTopic(), ':createdAt' => $event->createdAt->format('Y-m-d H:i:s.u'), ':payload' => $payload]);
         $connection->commit();
     }
     private function createSchema(): void


4) /var/www/html/src/Database/SqLiteEventStore.php:53    [M] ArrayItem

@@ @@
                               :payload
                               )
                               ');
-        $statement->execute([':eventId' => $event->eventId, ':correlationId' => $event->correlationId, ':topic' => $event->getTopic(), ':createdAt' => $event->createdAt->format('Y-m-d H:i:s.u'), ':payload' => $payload]);
+        $statement->execute([':eventId' => $event->eventId, ':correlationId' => $event->correlationId, ':topic' => $event->getTopic(), ':createdAt' > $event->createdAt->format('Y-m-d H:i:s.u'), ':payload' => $payload]);
         $connection->commit();
     }
     private function createSchema(): void


5) /var/www/html/src/Database/SqLiteEventStore.php:58    [M] MethodCallRemoval

@@ @@
                               )
                               ');
         $statement->execute([':eventId' => $event->eventId, ':correlationId' => $event->correlationId, ':topic' => $event->getTopic(), ':createdAt' => $event->createdAt->format('Y-m-d H:i:s.u'), ':payload' => $payload]);
-        $connection->commit();
+        
     }
     private function createSchema(): void
     {


6) /var/www/html/src/Database/SqLiteEventStore.php:72    [M] MethodCallRemoval

@@ @@
             createdAt TEXT,
             payload LONGTEXT
         )');
-        $this->pdo->exec('CREATE INDEX IF NOT EXISTS idx_correlation_id ON events (correlationId)');
+        
         $this->pdo->exec('CREATE INDEX IF NOT EXISTS idx_topic ON events (topic)');
     }
     public function loadAll(): array


7) /var/www/html/src/Database/SqLiteEventStore.php:73    [M] MethodCallRemoval

@@ @@
             payload LONGTEXT
         )');
         $this->pdo->exec('CREATE INDEX IF NOT EXISTS idx_correlation_id ON events (correlationId)');
-        $this->pdo->exec('CREATE INDEX IF NOT EXISTS idx_topic ON events (topic)');
+        
     }
     public function loadAll(): array
     {


8) /var/www/html/src/Database/SqLiteEventStore.php:92    [M] ArrayOneItem

@@ @@
                     $events[] = PostCreatedEvent::fromJson($eventArray['payload']);
             }
         }
-        return $events;
+        return count($events) > 1 ? array_slice($events, 0, 1, true) : $events;
     }
 }


9) /var/www/html/src/DomainObject/Content/Event/TextContentCreatedEvent.php:26    [M] MethodCallRemoval

@@ @@
     }
     private function __construct(string $eventId, string $correlationId, \DateTimeInterface $createdAt, public string $content)
     {
-        parent::__construct($correlationId, $eventId, $createdAt);
+        
     }
     public static function create(string $content): self
     {


10) /var/www/html/src/DomainObject/Content/TextContent.php:30    [M] MethodCallRemoval

@@ @@
     {
         switch ($event::getTopic()) {
             case TextContentCreatedEvent::getTopic():
-                $this->applyTextContentCreatedEvent($event);
+                
                 break;
             default:
                 throw DomainObjectException::unsupportedEvent($event);


11) /var/www/html/src/DomainObject/Post/Event/PostCreatedEvent.php:44    [M] DecrementInteger

@@ @@
     }
     public static function fromJson(string $payload)
     {
-        $data = json_decode($payload, true, 512, JSON_THROW_ON_ERROR);
+        $data = json_decode($payload, true, 511, JSON_THROW_ON_ERROR);
         return new self($data['eventId'], $data['correlationId'], new DateTimeImmutable($data['createdAt']['date'], new \DateTimeZone($data['createdAt']['timezone'])), $data['title'], State::from($data['state']));
     }
 }


12) /var/www/html/src/DomainObject/Post/Event/PostCreatedEvent.php:44    [M] IncrementInteger

@@ @@
     }
     public static function fromJson(string $payload)
     {
-        $data = json_decode($payload, true, 512, JSON_THROW_ON_ERROR);
+        $data = json_decode($payload, true, 513, JSON_THROW_ON_ERROR);
         return new self($data['eventId'], $data['correlationId'], new DateTimeImmutable($data['createdAt']['date'], new \DateTimeZone($data['createdAt']['timezone'])), $data['title'], State::from($data['state']));
     }
 }


Timed Out mutants:
==================

Skipped mutants:
================

Not Covered mutants:
====================

1) /var/www/html/src/DomainObject/Post/Event/TextContentAddedEvent.php:24    [M] MethodCallRemoval

@@ @@
     }
     private function __construct(string $eventId, string $correlationId, \DateTimeInterface $createdAt, public string $textContentId)
     {
-        parent::__construct($correlationId, $eventId, $createdAt);
+        
     }
 }


2) /var/www/html/src/DomainObject/Post/Post.php:48    [M] MethodCallRemoval

@@ @@
                 $this->applyPostCreatedEvent($event);
                 break;
             case TextContentAddedEvent::getTopic():
-                $this->applyTextContentAddedEvent($event);
+                
                 break;
             default:
                 throw DomainObjectException::unsupportedEvent($event);


3) /var/www/html/src/DomainObject/Post/Post.php:51    [M] Throw_

@@ @@
                 $this->applyTextContentAddedEvent($event);
                 break;
             default:
-                throw DomainObjectException::unsupportedEvent($event);
+                DomainObjectException::unsupportedEvent($event);
         }
     }
     private function applyPostCreatedEvent(PostCreatedEvent $event): void


4) /var/www/html/src/Kernel.php:17    [M] PublicVisibility

@@ @@
 final class Kernel
 {
     private static Container $container;
-    public static function boot(): void
+    protected static function boot(): void
     {
         $container = new ContainerBuilder();
         $rootDir = dirname(__DIR__ . '../');


5) /var/www/html/src/Kernel.php:21    [M] Concat

@@ @@
     public static function boot(): void
     {
         $container = new ContainerBuilder();
-        $rootDir = dirname(__DIR__ . '../');
+        $rootDir = dirname('../' . __DIR__);
         $configDir = $rootDir . '/config/services/';
         $loader = new PhpFileLoader($container, new FileLocator($configDir));
         $loader->load('services.php');


6) /var/www/html/src/Kernel.php:21    [M] ConcatOperandRemoval

@@ @@
     public static function boot(): void
     {
         $container = new ContainerBuilder();
-        $rootDir = dirname(__DIR__ . '../');
+        $rootDir = dirname('../');
         $configDir = $rootDir . '/config/services/';
         $loader = new PhpFileLoader($container, new FileLocator($configDir));
         $loader->load('services.php');


7) /var/www/html/src/Kernel.php:21    [M] ConcatOperandRemoval

@@ @@
     public static function boot(): void
     {
         $container = new ContainerBuilder();
-        $rootDir = dirname(__DIR__ . '../');
+        $rootDir = dirname(__DIR__);
         $configDir = $rootDir . '/config/services/';
         $loader = new PhpFileLoader($container, new FileLocator($configDir));
         $loader->load('services.php');


8) /var/www/html/src/Kernel.php:22    [M] Concat

@@ @@
     {
         $container = new ContainerBuilder();
         $rootDir = dirname(__DIR__ . '../');
-        $configDir = $rootDir . '/config/services/';
+        $configDir = '/config/services/' . $rootDir;
         $loader = new PhpFileLoader($container, new FileLocator($configDir));
         $loader->load('services.php');
         $container->compile();


9) /var/www/html/src/Kernel.php:22    [M] ConcatOperandRemoval

@@ @@
     {
         $container = new ContainerBuilder();
         $rootDir = dirname(__DIR__ . '../');
-        $configDir = $rootDir . '/config/services/';
+        $configDir = '/config/services/';
         $loader = new PhpFileLoader($container, new FileLocator($configDir));
         $loader->load('services.php');
         $container->compile();


10) /var/www/html/src/Kernel.php:22    [M] ConcatOperandRemoval

@@ @@
     {
         $container = new ContainerBuilder();
         $rootDir = dirname(__DIR__ . '../');
-        $configDir = $rootDir . '/config/services/';
+        $configDir = $rootDir;
         $loader = new PhpFileLoader($container, new FileLocator($configDir));
         $loader->load('services.php');
         $container->compile();


11) /var/www/html/src/Kernel.php:25    [M] MethodCallRemoval

@@ @@
         $rootDir = dirname(__DIR__ . '../');
         $configDir = $rootDir . '/config/services/';
         $loader = new PhpFileLoader($container, new FileLocator($configDir));
-        $loader->load('services.php');
+        
         $container->compile();
         self::$container = $container;
     }


12) /var/www/html/src/Kernel.php:27    [M] MethodCallRemoval

@@ @@
         $configDir = $rootDir . '/config/services/';
         $loader = new PhpFileLoader($container, new FileLocator($configDir));
         $loader->load('services.php');
-        $container->compile();
+        
         self::$container = $container;
     }
     public static function getContainer(): Container


13) /var/www/html/src/Kernel.php:34    [M] PublicVisibility

@@ @@
         $container->compile();
         self::$container = $container;
     }
-    public static function getContainer(): Container
+    protected static function getContainer(): Container
     {
         return self::$container;
     }
 }
